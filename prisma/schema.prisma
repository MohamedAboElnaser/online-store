// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DEV_URL")
  schemas  = ["order", "user", "product", "review", "cart"]
}

model User {
  id         String      @id @default(uuid())
  firstName  String
  lastName   String?
  email      String      @unique
  password   String
  role       Role        @default(CUSTOMER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  isVerified Boolean     @default(false)
  Reviews    Reviews[]
  Orders     Order[]
  whishlist  whishlist[]
  Cart       Cart[]
  otps       otps[]

  @@map("users")
  @@schema("user")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]

  @@map("categories")
  @@schema("product")
}

model Product {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  countInStock Int         @map("count_in_stock")
  category     Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId   String      @map("category_id")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime?   @updatedAt
  images       String[]
  Reviews      Reviews[]
  OrderItem    OrderItem[]
  whishlist    whishlist[]
  CartItem     CartItem[]

  @@map("products")
  @@schema("product")
}

model Reviews {
  id        String    @id @default(uuid())
  rating    Int
  comment   String?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @map("product_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("reviews")
  @@schema("review")
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId  String      @map("customer_id")
  paidAt      DateTime? // this will be set wen the status is completed
  orderStatus OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  OrderItem   OrderItem[]

  @@map("orders")
  @@schema("order")
}

model OrderItem {
  id        String    @id @default(uuid())
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId   String    @map("order_id")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String    @map("product_id")
  quantity  Int
  unitPrice Float     @map("unit_price")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("order_items")
  @@schema("order")
}

model whishlist {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String    @map("customer_id")
  product    Product   @relation(fields: [productId], references: [id])
  productId  String    @map("product_id")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("whishlists")
  @@schema("user")
}

model Cart {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customerId String     @map("customer_id")
  CartItem   CartItem[]

  @@map("carts")
  @@schema("cart")
}

model CartItem {
  id        String    @id @default(uuid())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    String    @map("cart_id")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String    @map("product_id")
  quantity  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("cart_items")
  @@schema("cart")
}

model otps {
  id        String    @id @default(uuid())
  otp       String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String    @map("user_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  validTill DateTime  @map("valid_till")

  @@map("otps")
  @@schema("user")
}

enum Role {
  CUSTOMER
  ADMIN

  @@schema("user")
}

enum OrderStatus {
  PENDING
  COMPLETED

  @@schema("order")
}
